[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "resonant-cli-oauth-client"
description = "A Python library for performing OAuth login to a Resonant server."
readme = "README.md"
requires-python = ">=3.10"
license = "Apache-2.0"
license-files = ["LICENSE", "NOTICE"]
maintainers = [{name = "Kitware, Inc.", email = "kitware@kitware.com"}]
keywords=[
  "resonant",
  "kitware-resonant",
  "oauth",
  "oauth2",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python",
]
dependencies = [
  "authlib",
  "dataclasses-json",
  "pyxdg",
]
dynamic = ["version"]

[project.urls]
Repository = "https://github.com/kitware-resonant/resonant-cli-oauth-client"
"Bug Reports" = "https://github.com/kitware-resonant/resonant-cli-oauth-client/issues"

[dependency-groups]
dev = [
  "click",
  "django",
  "django-allauth[idp-oidc]",
  "requests",
  "tox",
  "tox-uv",
]
lint = [
  "ruff",
]
format = [
  "ruff",
]
type = [
  "mypy",
  "django-stubs[compatible-mypy]",
  "types-pyxdg",
  "types-requests",
]

[tool.hatch.build]
only-include = [
  "resonant_cli_oauth_client",
]

[tool.hatch.version]
source = "vcs"

[tool.mypy]
files = [
  "resonant_cli_oauth_client",
  "example",
]
check_untyped_defs = true
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
  "allauth.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # Incompatible with formatter
  # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  "COM812", # missing-trailing-comma
  "COM819", # prohibited-trailing-comma
  "D206", # indent-with-spaces
  "D300", # triple-single-quotes
  "E111", # indentation-with-invalid-multiple
  "E114", # indentation-with-invalid-multiple-comment
  "E117", # over-indented
  "ISC001", # single-line-implicit-string-concatenation
  "ISC002", # multi-line-implicit-string-concatenation
  "Q", # flake8-quotes
  "W191", # tab-indentation

  "A003", # Class attribute is shadowing a Python builtin
  "ANN", # flake8-annotations
  "ARG001", # Unused function argument
  "ARG002", # Unused method argument
  "D1", # Missing docstring
  "EM101", # Exception must not use a string literal, assign to variable first
  "EM102", # Exception must not use an f-string literal, assign to variable first
  "ERA001", # Found commented-out code
  "FIX", # flake8-fixme
  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO
  "TRY003", # Avoid specifying long messages outside the exception class
  "RET505", # superfluous else return statement

  # Excessive
  "RET503", # implict return
  "RET506", # else after raise
  "PLR2004", # magic value used in comparison

  # Try to fix upstream
  "RUF012", #  Mutable class attributes should be annotated with `typing.ClassVar`

  # Try to fix in the future
  "DJ001", # null=True on char fields
  "TC002",  # use type-checking blocks
  "TRY002", # create custom exceptions
  "A002", # shadowing builtins, we do this a lot with id for endpoints
]

[tool.ruff.lint.isort]
# Sort by name, don't cluster "from" vs "import"
force-sort-within-sections = true

[tool.ruff.lint.pydocstyle]
convention = "pep257"
